// Generated from USDA.g4 by ANTLR 4.13.2
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,23,211,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,2,1,3,1,3,1,
4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,
11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,
1,12,1,12,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,
14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,
17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,5,18,141,8,18,10,18,12,18,144,9,18,
1,19,1,19,1,19,1,19,5,19,150,8,19,10,19,12,19,153,9,19,1,19,1,19,1,20,3,
20,158,8,20,1,20,5,20,161,8,20,10,20,12,20,164,9,20,1,20,3,20,167,8,20,1,
20,4,20,170,8,20,11,20,12,20,171,1,20,1,20,3,20,176,8,20,1,20,4,20,179,8,
20,11,20,12,20,180,3,20,183,8,20,1,21,1,21,5,21,187,8,21,10,21,12,21,190,
9,21,1,21,1,21,1,21,1,21,5,21,196,8,21,10,21,12,21,199,9,21,3,21,201,8,21,
1,21,1,21,1,22,4,22,206,8,22,11,22,12,22,207,1,22,1,22,0,0,23,1,1,3,2,5,
3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,
33,17,35,18,37,19,39,20,41,21,43,22,45,23,1,0,9,3,0,65,90,95,95,97,122,4,
0,48,58,65,90,95,95,97,122,3,0,10,10,13,13,34,34,2,0,43,43,45,45,1,0,48,
57,1,0,46,46,2,0,69,69,101,101,2,0,10,10,13,13,3,0,9,10,13,13,32,32,224,
0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,
0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,
0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,
35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,
0,0,1,47,1,0,0,0,3,49,1,0,0,0,5,51,1,0,0,0,7,55,1,0,0,0,9,57,1,0,0,0,11,
59,1,0,0,0,13,61,1,0,0,0,15,63,1,0,0,0,17,66,1,0,0,0,19,68,1,0,0,0,21,70,
1,0,0,0,23,72,1,0,0,0,25,83,1,0,0,0,27,91,1,0,0,0,29,95,1,0,0,0,31,105,1,
0,0,0,33,121,1,0,0,0,35,132,1,0,0,0,37,138,1,0,0,0,39,145,1,0,0,0,41,157,
1,0,0,0,43,200,1,0,0,0,45,205,1,0,0,0,47,48,5,123,0,0,48,2,1,0,0,0,49,50,
5,125,0,0,50,4,1,0,0,0,51,52,5,100,0,0,52,53,5,101,0,0,53,54,5,102,0,0,54,
6,1,0,0,0,55,56,5,40,0,0,56,8,1,0,0,0,57,58,5,41,0,0,58,10,1,0,0,0,59,60,
5,44,0,0,60,12,1,0,0,0,61,62,5,61,0,0,62,14,1,0,0,0,63,64,5,61,0,0,64,65,
5,40,0,0,65,16,1,0,0,0,66,67,5,91,0,0,67,18,1,0,0,0,68,69,5,93,0,0,69,20,
1,0,0,0,70,71,5,58,0,0,71,22,1,0,0,0,72,73,5,118,0,0,73,74,5,97,0,0,74,75,
5,114,0,0,75,76,5,105,0,0,76,77,5,97,0,0,77,78,5,110,0,0,78,79,5,116,0,0,
79,80,5,83,0,0,80,81,5,101,0,0,81,82,5,116,0,0,82,24,1,0,0,0,83,84,5,118,
0,0,84,85,5,97,0,0,85,86,5,114,0,0,86,87,5,105,0,0,87,88,5,97,0,0,88,89,
5,110,0,0,89,90,5,116,0,0,90,26,1,0,0,0,91,92,5,114,0,0,92,93,5,101,0,0,
93,94,5,108,0,0,94,28,1,0,0,0,95,96,5,115,0,0,96,97,5,117,0,0,97,98,5,98,
0,0,98,99,5,76,0,0,99,100,5,97,0,0,100,101,5,121,0,0,101,102,5,101,0,0,102,
103,5,114,0,0,103,104,5,115,0,0,104,30,1,0,0,0,105,106,5,99,0,0,106,107,
5,117,0,0,107,108,5,115,0,0,108,109,5,116,0,0,109,110,5,111,0,0,110,111,
5,109,0,0,111,112,5,76,0,0,112,113,5,97,0,0,113,114,5,121,0,0,114,115,5,
101,0,0,115,116,5,114,0,0,116,117,5,68,0,0,117,118,5,97,0,0,118,119,5,116,
0,0,119,120,5,97,0,0,120,32,1,0,0,0,121,122,5,99,0,0,122,123,5,117,0,0,123,
124,5,115,0,0,124,125,5,116,0,0,125,126,5,111,0,0,126,127,5,109,0,0,127,
128,5,68,0,0,128,129,5,97,0,0,129,130,5,116,0,0,130,131,5,97,0,0,131,34,
1,0,0,0,132,133,5,108,0,0,133,134,5,97,0,0,134,135,5,121,0,0,135,136,5,101,
0,0,136,137,5,114,0,0,137,36,1,0,0,0,138,142,7,0,0,0,139,141,7,1,0,0,140,
139,1,0,0,0,141,144,1,0,0,0,142,140,1,0,0,0,142,143,1,0,0,0,143,38,1,0,0,
0,144,142,1,0,0,0,145,151,5,34,0,0,146,150,8,2,0,0,147,148,5,92,0,0,148,
150,5,34,0,0,149,146,1,0,0,0,149,147,1,0,0,0,150,153,1,0,0,0,151,149,1,0,
0,0,151,152,1,0,0,0,152,154,1,0,0,0,153,151,1,0,0,0,154,155,5,34,0,0,155,
40,1,0,0,0,156,158,7,3,0,0,157,156,1,0,0,0,157,158,1,0,0,0,158,162,1,0,0,
0,159,161,7,4,0,0,160,159,1,0,0,0,161,164,1,0,0,0,162,160,1,0,0,0,162,163,
1,0,0,0,163,166,1,0,0,0,164,162,1,0,0,0,165,167,7,5,0,0,166,165,1,0,0,0,
166,167,1,0,0,0,167,169,1,0,0,0,168,170,7,4,0,0,169,168,1,0,0,0,170,171,
1,0,0,0,171,169,1,0,0,0,171,172,1,0,0,0,172,182,1,0,0,0,173,175,7,6,0,0,
174,176,7,3,0,0,175,174,1,0,0,0,175,176,1,0,0,0,176,178,1,0,0,0,177,179,
7,4,0,0,178,177,1,0,0,0,179,180,1,0,0,0,180,178,1,0,0,0,180,181,1,0,0,0,
181,183,1,0,0,0,182,173,1,0,0,0,182,183,1,0,0,0,183,42,1,0,0,0,184,188,5,
35,0,0,185,187,8,7,0,0,186,185,1,0,0,0,187,190,1,0,0,0,188,186,1,0,0,0,188,
189,1,0,0,0,189,201,1,0,0,0,190,188,1,0,0,0,191,192,5,47,0,0,192,193,5,47,
0,0,193,197,1,0,0,0,194,196,8,7,0,0,195,194,1,0,0,0,196,199,1,0,0,0,197,
195,1,0,0,0,197,198,1,0,0,0,198,201,1,0,0,0,199,197,1,0,0,0,200,184,1,0,
0,0,200,191,1,0,0,0,201,202,1,0,0,0,202,203,6,21,0,0,203,44,1,0,0,0,204,
206,7,8,0,0,205,204,1,0,0,0,206,207,1,0,0,0,207,205,1,0,0,0,207,208,1,0,
0,0,208,209,1,0,0,0,209,210,6,22,0,0,210,46,1,0,0,0,15,0,142,149,151,157,
162,166,171,175,180,182,188,197,200,207,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class USDALexer extends antlr4.Lexer {

    static grammarFileName = "USDA.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'{'", "'}'", "'def'", "'('", "')'", "','", 
                         "'='", "'=('", "'['", "']'", "':'", "'variantSet'", 
                         "'variant'", "'rel'", "'subLayers'", "'customLayerData'", 
                         "'customData'", "'layer'" ];
	static symbolicNames = [ null, null, null, null, null, null, null, null, 
                          null, null, null, null, null, null, null, null, 
                          null, null, "LAYER", "IDENTIFIER", "STRING", "NUMBER", 
                          "COMMENT", "WS" ];
	static ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                      "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", 
                      "T__13", "T__14", "T__15", "T__16", "LAYER", "IDENTIFIER", 
                      "STRING", "NUMBER", "COMMENT", "WS" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }
}

USDALexer.EOF = antlr4.Token.EOF;
USDALexer.T__0 = 1;
USDALexer.T__1 = 2;
USDALexer.T__2 = 3;
USDALexer.T__3 = 4;
USDALexer.T__4 = 5;
USDALexer.T__5 = 6;
USDALexer.T__6 = 7;
USDALexer.T__7 = 8;
USDALexer.T__8 = 9;
USDALexer.T__9 = 10;
USDALexer.T__10 = 11;
USDALexer.T__11 = 12;
USDALexer.T__12 = 13;
USDALexer.T__13 = 14;
USDALexer.T__14 = 15;
USDALexer.T__15 = 16;
USDALexer.T__16 = 17;
USDALexer.LAYER = 18;
USDALexer.IDENTIFIER = 19;
USDALexer.STRING = 20;
USDALexer.NUMBER = 21;
USDALexer.COMMENT = 22;
USDALexer.WS = 23;



